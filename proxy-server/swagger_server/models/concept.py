# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Concept(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, rdfsis_defined_by: str=None, id: str=None, skospref_label: str=None, skosdefinition: str=None, skosnote: str=None, skosalt_label: str=None):
        """
        Concept - a model defined in Swagger

        :param rdfsis_defined_by: The rdfsis_defined_by of this Concept.
        :type rdfsis_defined_by: str
        :param id: The id of this Concept.
        :type id: str
        :param skospref_label: The skospref_label of this Concept.
        :type skospref_label: str
        :param skosdefinition: The skosdefinition of this Concept.
        :type skosdefinition: str
        :param skosnote: The skosnote of this Concept.
        :type skosnote: str
        :param skosalt_label: The skosalt_label of this Concept.
        :type skosalt_label: str
        """
        self.swagger_types = {
            'rdfsis_defined_by': str,
            'id': str,
            'skospref_label': str,
            'skosdefinition': str,
            'skosnote': str,
            'skosalt_label': str
        }

        self.attribute_map = {
            'rdfsis_defined_by': 'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
            'id': '@id',
            'skospref_label': 'http://www.w3.org/2004/02/skos/core#prefLabel',
            'skosdefinition': 'http://www.w3.org/2004/02/skos/core#definition',
            'skosnote': 'http://www.w3.org/2004/02/skos/core#note',
            'skosalt_label': 'http://www.w3.org/2004/02/skos/core#altLabel'
        }

        self._rdfsis_defined_by = rdfsis_defined_by
        self._id = id
        self._skospref_label = skospref_label
        self._skosdefinition = skosdefinition
        self._skosnote = skosnote
        self._skosalt_label = skosalt_label

    @classmethod
    def from_dict(cls, dikt) -> 'Concept':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The concept of this Concept.
        :rtype: Concept
        """
        return deserialize_model(dikt, cls)

    @property
    def rdfsis_defined_by(self) -> str:
        """
        Gets the rdfsis_defined_by of this Concept.

        :return: The rdfsis_defined_by of this Concept.
        :rtype: str
        """
        return self._rdfsis_defined_by

    @rdfsis_defined_by.setter
    def rdfsis_defined_by(self, rdfsis_defined_by: str):
        """
        Sets the rdfsis_defined_by of this Concept.

        :param rdfsis_defined_by: The rdfsis_defined_by of this Concept.
        :type rdfsis_defined_by: str
        """

        self._rdfsis_defined_by = rdfsis_defined_by

    @property
    def id(self) -> str:
        """
        Gets the id of this Concept.

        :return: The id of this Concept.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Concept.

        :param id: The id of this Concept.
        :type id: str
        """

        self._id = id

    @property
    def skospref_label(self) -> str:
        """
        Gets the skospref_label of this Concept.

        :return: The skospref_label of this Concept.
        :rtype: str
        """
        return self._skospref_label

    @skospref_label.setter
    def skospref_label(self, skospref_label: str):
        """
        Sets the skospref_label of this Concept.

        :param skospref_label: The skospref_label of this Concept.
        :type skospref_label: str
        """

        self._skospref_label = skospref_label

    @property
    def skosdefinition(self) -> str:
        """
        Gets the skosdefinition of this Concept.

        :return: The skosdefinition of this Concept.
        :rtype: str
        """
        return self._skosdefinition

    @skosdefinition.setter
    def skosdefinition(self, skosdefinition: str):
        """
        Sets the skosdefinition of this Concept.

        :param skosdefinition: The skosdefinition of this Concept.
        :type skosdefinition: str
        """

        self._skosdefinition = skosdefinition

    @property
    def skosnote(self) -> str:
        """
        Gets the skosnote of this Concept.

        :return: The skosnote of this Concept.
        :rtype: str
        """
        return self._skosnote

    @skosnote.setter
    def skosnote(self, skosnote: str):
        """
        Sets the skosnote of this Concept.

        :param skosnote: The skosnote of this Concept.
        :type skosnote: str
        """

        self._skosnote = skosnote

    @property
    def skosalt_label(self) -> str:
        """
        Gets the skosalt_label of this Concept.

        :return: The skosalt_label of this Concept.
        :rtype: str
        """
        return self._skosalt_label

    @skosalt_label.setter
    def skosalt_label(self, skosalt_label: str):
        """
        Sets the skosalt_label of this Concept.

        :param skosalt_label: The skosalt_label of this Concept.
        :type skosalt_label: str
        """

        self._skosalt_label = skosalt_label

