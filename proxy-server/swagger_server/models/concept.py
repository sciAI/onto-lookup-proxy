# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.jsonld_id import JsonldId
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Concept(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, httpschema_orgrepository: JsonldId=None, httpschema_orgontology: JsonldId=None, iri: str=None, label: str=None, description: str=None, short: str=None, synonyms: str=None):
        """
        Concept - a model defined in Swagger

        :param httpschema_orgrepository: The httpschema_orgrepository of this Concept.
        :type httpschema_orgrepository: JsonldId
        :param httpschema_orgontology: The httpschema_orgontology of this Concept.
        :type httpschema_orgontology: JsonldId
        :param iri: The iri of this Concept.
        :type iri: str
        :param label: The label of this Concept.
        :type label: str
        :param description: The description of this Concept.
        :type description: str
        :param short: The short of this Concept.
        :type short: str
        :param synonyms: The synonyms of this Concept.
        :type synonyms: str
        """
        self.swagger_types = {
            'httpschema_orgrepository': JsonldId,
            'httpschema_orgontology': JsonldId,
            'iri': str,
            'label': str,
            'description': str,
            'short': str,
            'synonyms': str
        }

        self.attribute_map = {
            'httpschema_orgrepository': 'http://schema.org/repository',
            'httpschema_orgontology': 'http://schema.org/ontology',
            'iri': 'http://schema.org/iri',
            'label': 'http://schema.org/label',
            'description': 'http://schema.org/description',
            'short': 'http://schema.org/short',
            'synonyms': 'http://schema.org/synonyms'
        }

        self._httpschema_orgrepository = httpschema_orgrepository
        self._httpschema_orgontology = httpschema_orgontology
        self._iri = iri
        self._label = label
        self._description = description
        self._short = short
        self._synonyms = synonyms

    @classmethod
    def from_dict(cls, dikt) -> 'Concept':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The concept of this Concept.
        :rtype: Concept
        """
        return deserialize_model(dikt, cls)

    @property
    def httpschema_orgrepository(self) -> JsonldId:
        """
        Gets the httpschema_orgrepository of this Concept.

        :return: The httpschema_orgrepository of this Concept.
        :rtype: JsonldId
        """
        return self._httpschema_orgrepository

    @httpschema_orgrepository.setter
    def httpschema_orgrepository(self, httpschema_orgrepository: JsonldId):
        """
        Sets the httpschema_orgrepository of this Concept.

        :param httpschema_orgrepository: The httpschema_orgrepository of this Concept.
        :type httpschema_orgrepository: JsonldId
        """

        self._httpschema_orgrepository = httpschema_orgrepository

    @property
    def httpschema_orgontology(self) -> JsonldId:
        """
        Gets the httpschema_orgontology of this Concept.

        :return: The httpschema_orgontology of this Concept.
        :rtype: JsonldId
        """
        return self._httpschema_orgontology

    @httpschema_orgontology.setter
    def httpschema_orgontology(self, httpschema_orgontology: JsonldId):
        """
        Sets the httpschema_orgontology of this Concept.

        :param httpschema_orgontology: The httpschema_orgontology of this Concept.
        :type httpschema_orgontology: JsonldId
        """

        self._httpschema_orgontology = httpschema_orgontology

    @property
    def iri(self) -> str:
        """
        Gets the iri of this Concept.

        :return: The iri of this Concept.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri: str):
        """
        Sets the iri of this Concept.

        :param iri: The iri of this Concept.
        :type iri: str
        """

        self._iri = iri

    @property
    def label(self) -> str:
        """
        Gets the label of this Concept.

        :return: The label of this Concept.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """
        Sets the label of this Concept.

        :param label: The label of this Concept.
        :type label: str
        """

        self._label = label

    @property
    def description(self) -> str:
        """
        Gets the description of this Concept.

        :return: The description of this Concept.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Concept.

        :param description: The description of this Concept.
        :type description: str
        """

        self._description = description

    @property
    def short(self) -> str:
        """
        Gets the short of this Concept.

        :return: The short of this Concept.
        :rtype: str
        """
        return self._short

    @short.setter
    def short(self, short: str):
        """
        Sets the short of this Concept.

        :param short: The short of this Concept.
        :type short: str
        """

        self._short = short

    @property
    def synonyms(self) -> str:
        """
        Gets the synonyms of this Concept.

        :return: The synonyms of this Concept.
        :rtype: str
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: str):
        """
        Sets the synonyms of this Concept.

        :param synonyms: The synonyms of this Concept.
        :type synonyms: str
        """

        self._synonyms = synonyms

