# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.jsonld_id import JsonldId
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Ontology(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, httpschema_orgrepository: JsonldId=None, iri: str=None, name: str=None, description: str=None, acronym: str=None, version: str=None, date: str=None):
        """
        Ontology - a model defined in Swagger

        :param httpschema_orgrepository: The httpschema_orgrepository of this Ontology.
        :type httpschema_orgrepository: JsonldId
        :param iri: The iri of this Ontology.
        :type iri: str
        :param name: The name of this Ontology.
        :type name: str
        :param description: The description of this Ontology.
        :type description: str
        :param acronym: The acronym of this Ontology.
        :type acronym: str
        :param version: The version of this Ontology.
        :type version: str
        :param date: The date of this Ontology.
        :type date: str
        """
        self.swagger_types = {
            'httpschema_orgrepository': JsonldId,
            'iri': str,
            'name': str,
            'description': str,
            'acronym': str,
            'version': str,
            'date': str
        }

        self.attribute_map = {
            'httpschema_orgrepository': 'http://schema.org/repository',
            'iri': 'iri',
            'name': 'name',
            'description': 'description',
            'acronym': 'acronym',
            'version': 'version',
            'date': 'date'
        }

        self._httpschema_orgrepository = httpschema_orgrepository
        self._iri = iri
        self._name = name
        self._description = description
        self._acronym = acronym
        self._version = version
        self._date = date

    @classmethod
    def from_dict(cls, dikt) -> 'Ontology':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ontology of this Ontology.
        :rtype: Ontology
        """
        return deserialize_model(dikt, cls)

    @property
    def httpschema_orgrepository(self) -> JsonldId:
        """
        Gets the httpschema_orgrepository of this Ontology.

        :return: The httpschema_orgrepository of this Ontology.
        :rtype: JsonldId
        """
        return self._httpschema_orgrepository

    @httpschema_orgrepository.setter
    def httpschema_orgrepository(self, httpschema_orgrepository: JsonldId):
        """
        Sets the httpschema_orgrepository of this Ontology.

        :param httpschema_orgrepository: The httpschema_orgrepository of this Ontology.
        :type httpschema_orgrepository: JsonldId
        """

        self._httpschema_orgrepository = httpschema_orgrepository

    @property
    def iri(self) -> str:
        """
        Gets the iri of this Ontology.

        :return: The iri of this Ontology.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri: str):
        """
        Sets the iri of this Ontology.

        :param iri: The iri of this Ontology.
        :type iri: str
        """

        self._iri = iri

    @property
    def name(self) -> str:
        """
        Gets the name of this Ontology.

        :return: The name of this Ontology.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Ontology.

        :param name: The name of this Ontology.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this Ontology.

        :return: The description of this Ontology.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Ontology.

        :param description: The description of this Ontology.
        :type description: str
        """

        self._description = description

    @property
    def acronym(self) -> str:
        """
        Gets the acronym of this Ontology.

        :return: The acronym of this Ontology.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym: str):
        """
        Sets the acronym of this Ontology.

        :param acronym: The acronym of this Ontology.
        :type acronym: str
        """

        self._acronym = acronym

    @property
    def version(self) -> str:
        """
        Gets the version of this Ontology.

        :return: The version of this Ontology.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """
        Sets the version of this Ontology.

        :param version: The version of this Ontology.
        :type version: str
        """

        self._version = version

    @property
    def date(self) -> str:
        """
        Gets the date of this Ontology.

        :return: The date of this Ontology.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date: str):
        """
        Sets the date of this Ontology.

        :param date: The date of this Ontology.
        :type date: str
        """

        self._date = date

