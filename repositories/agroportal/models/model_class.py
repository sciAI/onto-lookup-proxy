# coding: utf-8

"""
    IBC AgroPortal API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ModelClass(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'definition': 'list[str]',
        'synonym': 'object',
        'pref_label': 'str',
        'links': 'Links'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'definition': 'definition',
        'synonym': 'synonym',
        'pref_label': 'prefLabel',
        'links': 'links'
    }

    def __init__(self, id=None, type=None, definition=None, synonym=None, pref_label=None, links=None):
        """
        ModelClass - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._definition = None
        self._synonym = None
        self._pref_label = None
        self._links = None

        if id is not None:
          self.id = id
        if type is not None:
          self.type = type
        if definition is not None:
          self.definition = definition
        if synonym is not None:
          self.synonym = synonym
        if pref_label is not None:
          self.pref_label = pref_label
        if links is not None:
          self.links = links

    @property
    def id(self):
        """
        Gets the id of this ModelClass.

        :return: The id of this ModelClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ModelClass.

        :param id: The id of this ModelClass.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this ModelClass.

        :return: The type of this ModelClass.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ModelClass.

        :param type: The type of this ModelClass.
        :type: str
        """

        self._type = type

    @property
    def definition(self):
        """
        Gets the definition of this ModelClass.

        :return: The definition of this ModelClass.
        :rtype: list[str]
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """
        Sets the definition of this ModelClass.

        :param definition: The definition of this ModelClass.
        :type: list[str]
        """

        self._definition = definition

    @property
    def synonym(self):
        """
        Gets the synonym of this ModelClass.

        :return: The synonym of this ModelClass.
        :rtype: object
        """
        return self._synonym

    @synonym.setter
    def synonym(self, synonym):
        """
        Sets the synonym of this ModelClass.

        :param synonym: The synonym of this ModelClass.
        :type: object
        """

        self._synonym = synonym

    @property
    def pref_label(self):
        """
        Gets the pref_label of this ModelClass.

        :return: The pref_label of this ModelClass.
        :rtype: str
        """
        return self._pref_label

    @pref_label.setter
    def pref_label(self, pref_label):
        """
        Sets the pref_label of this ModelClass.

        :param pref_label: The pref_label of this ModelClass.
        :type: str
        """

        self._pref_label = pref_label

    @property
    def links(self):
        """
        Gets the links of this ModelClass.

        :return: The links of this ModelClass.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this ModelClass.

        :param links: The links of this ModelClass.
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModelClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
