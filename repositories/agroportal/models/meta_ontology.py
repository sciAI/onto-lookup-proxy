# coding: utf-8

"""
    IBC AgroPortal API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetaOntology(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'dcttitle': 'str',
        'dctdescription': 'str',
        'omvacronym': 'str',
        'owlversion_info': 'str',
        'dctmodified': 'str'
    }

    attribute_map = {
        'id': '@id',
        'dcttitle': 'dct:title',
        'dctdescription': 'dct:description',
        'omvacronym': 'omv:acronym',
        'owlversion_info': 'owl:versionInfo',
        'dctmodified': 'dct:modified'
    }

    def __init__(self, id='id', dcttitle='name', dctdescription='', omvacronym='acronym', owlversion_info='', dctmodified=''):
        """
        MetaOntology - a model defined in Swagger
        """

        self._id = None
        self._dcttitle = None
        self._dctdescription = None
        self._omvacronym = None
        self._owlversion_info = None
        self._dctmodified = None

        if id is not None:
          self.id = id
        if dcttitle is not None:
          self.dcttitle = dcttitle
        if dctdescription is not None:
          self.dctdescription = dctdescription
        if omvacronym is not None:
          self.omvacronym = omvacronym
        if owlversion_info is not None:
          self.owlversion_info = owlversion_info
        if dctmodified is not None:
          self.dctmodified = dctmodified

    @property
    def id(self):
        """
        Gets the id of this MetaOntology.

        :return: The id of this MetaOntology.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MetaOntology.

        :param id: The id of this MetaOntology.
        :type: str
        """

        self._id = id

    @property
    def dcttitle(self):
        """
        Gets the dcttitle of this MetaOntology.

        :return: The dcttitle of this MetaOntology.
        :rtype: str
        """
        return self._dcttitle

    @dcttitle.setter
    def dcttitle(self, dcttitle):
        """
        Sets the dcttitle of this MetaOntology.

        :param dcttitle: The dcttitle of this MetaOntology.
        :type: str
        """

        self._dcttitle = dcttitle

    @property
    def dctdescription(self):
        """
        Gets the dctdescription of this MetaOntology.

        :return: The dctdescription of this MetaOntology.
        :rtype: str
        """
        return self._dctdescription

    @dctdescription.setter
    def dctdescription(self, dctdescription):
        """
        Sets the dctdescription of this MetaOntology.

        :param dctdescription: The dctdescription of this MetaOntology.
        :type: str
        """

        self._dctdescription = dctdescription

    @property
    def omvacronym(self):
        """
        Gets the omvacronym of this MetaOntology.

        :return: The omvacronym of this MetaOntology.
        :rtype: str
        """
        return self._omvacronym

    @omvacronym.setter
    def omvacronym(self, omvacronym):
        """
        Sets the omvacronym of this MetaOntology.

        :param omvacronym: The omvacronym of this MetaOntology.
        :type: str
        """

        self._omvacronym = omvacronym

    @property
    def owlversion_info(self):
        """
        Gets the owlversion_info of this MetaOntology.

        :return: The owlversion_info of this MetaOntology.
        :rtype: str
        """
        return self._owlversion_info

    @owlversion_info.setter
    def owlversion_info(self, owlversion_info):
        """
        Sets the owlversion_info of this MetaOntology.

        :param owlversion_info: The owlversion_info of this MetaOntology.
        :type: str
        """

        self._owlversion_info = owlversion_info

    @property
    def dctmodified(self):
        """
        Gets the dctmodified of this MetaOntology.

        :return: The dctmodified of this MetaOntology.
        :rtype: str
        """
        return self._dctmodified

    @dctmodified.setter
    def dctmodified(self, dctmodified):
        """
        Sets the dctmodified of this MetaOntology.

        :param dctmodified: The dctmodified of this MetaOntology.
        :type: str
        """

        self._dctmodified = dctmodified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetaOntology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
