# coding: utf-8

"""
    EBI OLS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetaSearch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'rdfsis_defined_by': 'str',
        'skospref_label': 'str',
        'skosdefinition': 'str',
        'skosnote': 'str',
        'skosalt_label': 'str'
    }

    attribute_map = {
        'id': '@id',
        'rdfsis_defined_by': 'rdfs:isDefinedBy',
        'skospref_label': 'skos:prefLabel',
        'skosdefinition': 'skos:definition',
        'skosnote': 'skos:note',
        'skosalt_label': 'skos:altLabel'
    }

    def __init__(self, id='iri', rdfsis_defined_by='ontology_name', skospref_label='label', skosdefinition='description', skosnote='short_form', skosalt_label=''):
        """
        MetaSearch - a model defined in Swagger
        """

        self._id = None
        self._rdfsis_defined_by = None
        self._skospref_label = None
        self._skosdefinition = None
        self._skosnote = None
        self._skosalt_label = None

        if id is not None:
          self.id = id
        if rdfsis_defined_by is not None:
          self.rdfsis_defined_by = rdfsis_defined_by
        if skospref_label is not None:
          self.skospref_label = skospref_label
        if skosdefinition is not None:
          self.skosdefinition = skosdefinition
        if skosnote is not None:
          self.skosnote = skosnote
        if skosalt_label is not None:
          self.skosalt_label = skosalt_label

    @property
    def id(self):
        """
        Gets the id of this MetaSearch.

        :return: The id of this MetaSearch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MetaSearch.

        :param id: The id of this MetaSearch.
        :type: str
        """

        self._id = id

    @property
    def rdfsis_defined_by(self):
        """
        Gets the rdfsis_defined_by of this MetaSearch.

        :return: The rdfsis_defined_by of this MetaSearch.
        :rtype: str
        """
        return self._rdfsis_defined_by

    @rdfsis_defined_by.setter
    def rdfsis_defined_by(self, rdfsis_defined_by):
        """
        Sets the rdfsis_defined_by of this MetaSearch.

        :param rdfsis_defined_by: The rdfsis_defined_by of this MetaSearch.
        :type: str
        """

        self._rdfsis_defined_by = rdfsis_defined_by

    @property
    def skospref_label(self):
        """
        Gets the skospref_label of this MetaSearch.

        :return: The skospref_label of this MetaSearch.
        :rtype: str
        """
        return self._skospref_label

    @skospref_label.setter
    def skospref_label(self, skospref_label):
        """
        Sets the skospref_label of this MetaSearch.

        :param skospref_label: The skospref_label of this MetaSearch.
        :type: str
        """

        self._skospref_label = skospref_label

    @property
    def skosdefinition(self):
        """
        Gets the skosdefinition of this MetaSearch.

        :return: The skosdefinition of this MetaSearch.
        :rtype: str
        """
        return self._skosdefinition

    @skosdefinition.setter
    def skosdefinition(self, skosdefinition):
        """
        Sets the skosdefinition of this MetaSearch.

        :param skosdefinition: The skosdefinition of this MetaSearch.
        :type: str
        """

        self._skosdefinition = skosdefinition

    @property
    def skosnote(self):
        """
        Gets the skosnote of this MetaSearch.

        :return: The skosnote of this MetaSearch.
        :rtype: str
        """
        return self._skosnote

    @skosnote.setter
    def skosnote(self, skosnote):
        """
        Sets the skosnote of this MetaSearch.

        :param skosnote: The skosnote of this MetaSearch.
        :type: str
        """

        self._skosnote = skosnote

    @property
    def skosalt_label(self):
        """
        Gets the skosalt_label of this MetaSearch.

        :return: The skosalt_label of this MetaSearch.
        :rtype: str
        """
        return self._skosalt_label

    @skosalt_label.setter
    def skosalt_label(self, skosalt_label):
        """
        Sets the skosalt_label of this MetaSearch.

        :param skosalt_label: The skosalt_label of this MetaSearch.
        :type: str
        """

        self._skosalt_label = skosalt_label

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetaSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
