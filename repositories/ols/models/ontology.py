# coding: utf-8

"""
    EBI OLS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ontology(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ontology_id': 'str',
        'loaded': 'str',
        'updated': 'str',
        'status': 'str',
        'message': 'str',
        'version': 'str',
        'number_of_terms': 'int',
        'number_of_properties': 'int',
        'number_of_individuals': 'int',
        'config': 'OntologyConfig',
        'links': 'Links'
    }

    attribute_map = {
        'ontology_id': 'ontologyId',
        'loaded': 'loaded',
        'updated': 'updated',
        'status': 'status',
        'message': 'message',
        'version': 'version',
        'number_of_terms': 'numberOfTerms',
        'number_of_properties': 'numberOfProperties',
        'number_of_individuals': 'numberOfIndividuals',
        'config': 'config',
        'links': '_links'
    }

    def __init__(self, ontology_id=None, loaded=None, updated=None, status=None, message=None, version=None, number_of_terms=None, number_of_properties=None, number_of_individuals=None, config=None, links=None):
        """
        Ontology - a model defined in Swagger
        """

        self._ontology_id = None
        self._loaded = None
        self._updated = None
        self._status = None
        self._message = None
        self._version = None
        self._number_of_terms = None
        self._number_of_properties = None
        self._number_of_individuals = None
        self._config = None
        self._links = None

        if ontology_id is not None:
          self.ontology_id = ontology_id
        if loaded is not None:
          self.loaded = loaded
        if updated is not None:
          self.updated = updated
        if status is not None:
          self.status = status
        if message is not None:
          self.message = message
        if version is not None:
          self.version = version
        if number_of_terms is not None:
          self.number_of_terms = number_of_terms
        if number_of_properties is not None:
          self.number_of_properties = number_of_properties
        if number_of_individuals is not None:
          self.number_of_individuals = number_of_individuals
        if config is not None:
          self.config = config
        if links is not None:
          self.links = links

    @property
    def ontology_id(self):
        """
        Gets the ontology_id of this Ontology.

        :return: The ontology_id of this Ontology.
        :rtype: str
        """
        return self._ontology_id

    @ontology_id.setter
    def ontology_id(self, ontology_id):
        """
        Sets the ontology_id of this Ontology.

        :param ontology_id: The ontology_id of this Ontology.
        :type: str
        """

        self._ontology_id = ontology_id

    @property
    def loaded(self):
        """
        Gets the loaded of this Ontology.

        :return: The loaded of this Ontology.
        :rtype: str
        """
        return self._loaded

    @loaded.setter
    def loaded(self, loaded):
        """
        Sets the loaded of this Ontology.

        :param loaded: The loaded of this Ontology.
        :type: str
        """

        self._loaded = loaded

    @property
    def updated(self):
        """
        Gets the updated of this Ontology.

        :return: The updated of this Ontology.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Ontology.

        :param updated: The updated of this Ontology.
        :type: str
        """

        self._updated = updated

    @property
    def status(self):
        """
        Gets the status of this Ontology.

        :return: The status of this Ontology.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Ontology.

        :param status: The status of this Ontology.
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """
        Gets the message of this Ontology.

        :return: The message of this Ontology.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Ontology.

        :param message: The message of this Ontology.
        :type: str
        """

        self._message = message

    @property
    def version(self):
        """
        Gets the version of this Ontology.

        :return: The version of this Ontology.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Ontology.

        :param version: The version of this Ontology.
        :type: str
        """

        self._version = version

    @property
    def number_of_terms(self):
        """
        Gets the number_of_terms of this Ontology.

        :return: The number_of_terms of this Ontology.
        :rtype: int
        """
        return self._number_of_terms

    @number_of_terms.setter
    def number_of_terms(self, number_of_terms):
        """
        Sets the number_of_terms of this Ontology.

        :param number_of_terms: The number_of_terms of this Ontology.
        :type: int
        """

        self._number_of_terms = number_of_terms

    @property
    def number_of_properties(self):
        """
        Gets the number_of_properties of this Ontology.

        :return: The number_of_properties of this Ontology.
        :rtype: int
        """
        return self._number_of_properties

    @number_of_properties.setter
    def number_of_properties(self, number_of_properties):
        """
        Sets the number_of_properties of this Ontology.

        :param number_of_properties: The number_of_properties of this Ontology.
        :type: int
        """

        self._number_of_properties = number_of_properties

    @property
    def number_of_individuals(self):
        """
        Gets the number_of_individuals of this Ontology.

        :return: The number_of_individuals of this Ontology.
        :rtype: int
        """
        return self._number_of_individuals

    @number_of_individuals.setter
    def number_of_individuals(self, number_of_individuals):
        """
        Sets the number_of_individuals of this Ontology.

        :param number_of_individuals: The number_of_individuals of this Ontology.
        :type: int
        """

        self._number_of_individuals = number_of_individuals

    @property
    def config(self):
        """
        Gets the config of this Ontology.

        :return: The config of this Ontology.
        :rtype: OntologyConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Ontology.

        :param config: The config of this Ontology.
        :type: OntologyConfig
        """

        self._config = config

    @property
    def links(self):
        """
        Gets the links of this Ontology.

        :return: The links of this Ontology.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Ontology.

        :param links: The links of this Ontology.
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ontology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
