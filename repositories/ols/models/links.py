# coding: utf-8

"""
    EBI OLS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Links(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'Link',
        'properties': 'Link',
        'individuals': 'Link',
        'ontologies': 'Link',
        'terms': 'Link',
        'profile': 'Link',
        'first': 'Link',
        'last': 'Link',
        'next': 'Link',
        'prev': 'Link',
        'parents': 'Link',
        'ancestors': 'Link',
        'jstree': 'Link',
        'children': 'Link',
        'descendants': 'Link',
        'graph': 'Link',
        'hierarchical_parents': 'Link',
        'hierarchical_ancestors': 'Link',
        'hierarchical_children': 'Link',
        'hierarchical_descendants': 'Link'
    }

    attribute_map = {
        '_self': 'self',
        'properties': 'properties',
        'individuals': 'individuals',
        'ontologies': 'ontologies',
        'terms': 'terms',
        'profile': 'profile',
        'first': 'first',
        'last': 'last',
        'next': 'next',
        'prev': 'prev',
        'parents': 'parents',
        'ancestors': 'ancestors',
        'jstree': 'jstree',
        'children': 'children',
        'descendants': 'descendants',
        'graph': 'graph',
        'hierarchical_parents': 'hierarchicalParents',
        'hierarchical_ancestors': 'hierarchicalAncestors',
        'hierarchical_children': 'hierarchicalChildren',
        'hierarchical_descendants': 'hierarchicalDescendants'
    }

    def __init__(self, _self=None, properties=None, individuals=None, ontologies=None, terms=None, profile=None, first=None, last=None, next=None, prev=None, parents=None, ancestors=None, jstree=None, children=None, descendants=None, graph=None, hierarchical_parents=None, hierarchical_ancestors=None, hierarchical_children=None, hierarchical_descendants=None):
        """
        Links - a model defined in Swagger
        """

        self.__self = None
        self._properties = None
        self._individuals = None
        self._ontologies = None
        self._terms = None
        self._profile = None
        self._first = None
        self._last = None
        self._next = None
        self._prev = None
        self._parents = None
        self._ancestors = None
        self._jstree = None
        self._children = None
        self._descendants = None
        self._graph = None
        self._hierarchical_parents = None
        self._hierarchical_ancestors = None
        self._hierarchical_children = None
        self._hierarchical_descendants = None

        if _self is not None:
          self._self = _self
        if properties is not None:
          self.properties = properties
        if individuals is not None:
          self.individuals = individuals
        if ontologies is not None:
          self.ontologies = ontologies
        if terms is not None:
          self.terms = terms
        if profile is not None:
          self.profile = profile
        if first is not None:
          self.first = first
        if last is not None:
          self.last = last
        if next is not None:
          self.next = next
        if prev is not None:
          self.prev = prev
        if parents is not None:
          self.parents = parents
        if ancestors is not None:
          self.ancestors = ancestors
        if jstree is not None:
          self.jstree = jstree
        if children is not None:
          self.children = children
        if descendants is not None:
          self.descendants = descendants
        if graph is not None:
          self.graph = graph
        if hierarchical_parents is not None:
          self.hierarchical_parents = hierarchical_parents
        if hierarchical_ancestors is not None:
          self.hierarchical_ancestors = hierarchical_ancestors
        if hierarchical_children is not None:
          self.hierarchical_children = hierarchical_children
        if hierarchical_descendants is not None:
          self.hierarchical_descendants = hierarchical_descendants

    @property
    def _self(self):
        """
        Gets the _self of this Links.

        :return: The _self of this Links.
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """
        Sets the _self of this Links.

        :param _self: The _self of this Links.
        :type: Link
        """

        self.__self = _self

    @property
    def properties(self):
        """
        Gets the properties of this Links.

        :return: The properties of this Links.
        :rtype: Link
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Links.

        :param properties: The properties of this Links.
        :type: Link
        """

        self._properties = properties

    @property
    def individuals(self):
        """
        Gets the individuals of this Links.

        :return: The individuals of this Links.
        :rtype: Link
        """
        return self._individuals

    @individuals.setter
    def individuals(self, individuals):
        """
        Sets the individuals of this Links.

        :param individuals: The individuals of this Links.
        :type: Link
        """

        self._individuals = individuals

    @property
    def ontologies(self):
        """
        Gets the ontologies of this Links.

        :return: The ontologies of this Links.
        :rtype: Link
        """
        return self._ontologies

    @ontologies.setter
    def ontologies(self, ontologies):
        """
        Sets the ontologies of this Links.

        :param ontologies: The ontologies of this Links.
        :type: Link
        """

        self._ontologies = ontologies

    @property
    def terms(self):
        """
        Gets the terms of this Links.

        :return: The terms of this Links.
        :rtype: Link
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this Links.

        :param terms: The terms of this Links.
        :type: Link
        """

        self._terms = terms

    @property
    def profile(self):
        """
        Gets the profile of this Links.

        :return: The profile of this Links.
        :rtype: Link
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this Links.

        :param profile: The profile of this Links.
        :type: Link
        """

        self._profile = profile

    @property
    def first(self):
        """
        Gets the first of this Links.

        :return: The first of this Links.
        :rtype: Link
        """
        return self._first

    @first.setter
    def first(self, first):
        """
        Sets the first of this Links.

        :param first: The first of this Links.
        :type: Link
        """

        self._first = first

    @property
    def last(self):
        """
        Gets the last of this Links.

        :return: The last of this Links.
        :rtype: Link
        """
        return self._last

    @last.setter
    def last(self, last):
        """
        Sets the last of this Links.

        :param last: The last of this Links.
        :type: Link
        """

        self._last = last

    @property
    def next(self):
        """
        Gets the next of this Links.

        :return: The next of this Links.
        :rtype: Link
        """
        return self._next

    @next.setter
    def next(self, next):
        """
        Sets the next of this Links.

        :param next: The next of this Links.
        :type: Link
        """

        self._next = next

    @property
    def prev(self):
        """
        Gets the prev of this Links.

        :return: The prev of this Links.
        :rtype: Link
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """
        Sets the prev of this Links.

        :param prev: The prev of this Links.
        :type: Link
        """

        self._prev = prev

    @property
    def parents(self):
        """
        Gets the parents of this Links.

        :return: The parents of this Links.
        :rtype: Link
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """
        Sets the parents of this Links.

        :param parents: The parents of this Links.
        :type: Link
        """

        self._parents = parents

    @property
    def ancestors(self):
        """
        Gets the ancestors of this Links.

        :return: The ancestors of this Links.
        :rtype: Link
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this Links.

        :param ancestors: The ancestors of this Links.
        :type: Link
        """

        self._ancestors = ancestors

    @property
    def jstree(self):
        """
        Gets the jstree of this Links.

        :return: The jstree of this Links.
        :rtype: Link
        """
        return self._jstree

    @jstree.setter
    def jstree(self, jstree):
        """
        Sets the jstree of this Links.

        :param jstree: The jstree of this Links.
        :type: Link
        """

        self._jstree = jstree

    @property
    def children(self):
        """
        Gets the children of this Links.

        :return: The children of this Links.
        :rtype: Link
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this Links.

        :param children: The children of this Links.
        :type: Link
        """

        self._children = children

    @property
    def descendants(self):
        """
        Gets the descendants of this Links.

        :return: The descendants of this Links.
        :rtype: Link
        """
        return self._descendants

    @descendants.setter
    def descendants(self, descendants):
        """
        Sets the descendants of this Links.

        :param descendants: The descendants of this Links.
        :type: Link
        """

        self._descendants = descendants

    @property
    def graph(self):
        """
        Gets the graph of this Links.

        :return: The graph of this Links.
        :rtype: Link
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """
        Sets the graph of this Links.

        :param graph: The graph of this Links.
        :type: Link
        """

        self._graph = graph

    @property
    def hierarchical_parents(self):
        """
        Gets the hierarchical_parents of this Links.

        :return: The hierarchical_parents of this Links.
        :rtype: Link
        """
        return self._hierarchical_parents

    @hierarchical_parents.setter
    def hierarchical_parents(self, hierarchical_parents):
        """
        Sets the hierarchical_parents of this Links.

        :param hierarchical_parents: The hierarchical_parents of this Links.
        :type: Link
        """

        self._hierarchical_parents = hierarchical_parents

    @property
    def hierarchical_ancestors(self):
        """
        Gets the hierarchical_ancestors of this Links.

        :return: The hierarchical_ancestors of this Links.
        :rtype: Link
        """
        return self._hierarchical_ancestors

    @hierarchical_ancestors.setter
    def hierarchical_ancestors(self, hierarchical_ancestors):
        """
        Sets the hierarchical_ancestors of this Links.

        :param hierarchical_ancestors: The hierarchical_ancestors of this Links.
        :type: Link
        """

        self._hierarchical_ancestors = hierarchical_ancestors

    @property
    def hierarchical_children(self):
        """
        Gets the hierarchical_children of this Links.

        :return: The hierarchical_children of this Links.
        :rtype: Link
        """
        return self._hierarchical_children

    @hierarchical_children.setter
    def hierarchical_children(self, hierarchical_children):
        """
        Sets the hierarchical_children of this Links.

        :param hierarchical_children: The hierarchical_children of this Links.
        :type: Link
        """

        self._hierarchical_children = hierarchical_children

    @property
    def hierarchical_descendants(self):
        """
        Gets the hierarchical_descendants of this Links.

        :return: The hierarchical_descendants of this Links.
        :rtype: Link
        """
        return self._hierarchical_descendants

    @hierarchical_descendants.setter
    def hierarchical_descendants(self, hierarchical_descendants):
        """
        Sets the hierarchical_descendants of this Links.

        :param hierarchical_descendants: The hierarchical_descendants of this Links.
        :type: Link
        """

        self._hierarchical_descendants = hierarchical_descendants

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Links):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
