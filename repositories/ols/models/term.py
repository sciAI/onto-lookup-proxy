# coding: utf-8

"""
    EBI OLS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Term(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iri': 'str',
        'label': 'str',
        'description': 'list[str]',
        'annotation': 'TermAnnotation',
        'synonyms': 'object',
        'ontology_name': 'str',
        'ontology_prefix': 'str',
        'ontology_iri': 'str',
        'is_obsolete': 'bool',
        'term_replaced_by': 'object',
        'is_defining_ontology': 'bool',
        'has_children': 'bool',
        'is_root': 'bool',
        'short_form': 'str',
        'in_subset': 'list[str]',
        'obo_id': 'str',
        'obo_definition_citation': 'list[object]',
        'obo_xref': 'list[object]',
        'obo_synonym': 'list[object]',
        'links': 'Links'
    }

    attribute_map = {
        'iri': 'iri',
        'label': 'label',
        'description': 'description',
        'annotation': 'annotation',
        'synonyms': 'synonyms',
        'ontology_name': 'ontology_name',
        'ontology_prefix': 'ontology_prefix',
        'ontology_iri': 'ontology_iri',
        'is_obsolete': 'is_obsolete',
        'term_replaced_by': 'term_replaced_by',
        'is_defining_ontology': 'is_defining_ontology',
        'has_children': 'has_children',
        'is_root': 'is_root',
        'short_form': 'short_form',
        'in_subset': 'in_subset',
        'obo_id': 'obo_id',
        'obo_definition_citation': 'obo_definition_citation',
        'obo_xref': 'obo_xref',
        'obo_synonym': 'obo_synonym',
        'links': '_links'
    }

    def __init__(self, iri=None, label=None, description=None, annotation=None, synonyms=None, ontology_name=None, ontology_prefix=None, ontology_iri=None, is_obsolete=None, term_replaced_by=None, is_defining_ontology=None, has_children=None, is_root=None, short_form=None, in_subset=None, obo_id=None, obo_definition_citation=None, obo_xref=None, obo_synonym=None, links=None):
        """
        Term - a model defined in Swagger
        """

        self._iri = None
        self._label = None
        self._description = None
        self._annotation = None
        self._synonyms = None
        self._ontology_name = None
        self._ontology_prefix = None
        self._ontology_iri = None
        self._is_obsolete = None
        self._term_replaced_by = None
        self._is_defining_ontology = None
        self._has_children = None
        self._is_root = None
        self._short_form = None
        self._in_subset = None
        self._obo_id = None
        self._obo_definition_citation = None
        self._obo_xref = None
        self._obo_synonym = None
        self._links = None

        if iri is not None:
          self.iri = iri
        if label is not None:
          self.label = label
        if description is not None:
          self.description = description
        if annotation is not None:
          self.annotation = annotation
        if synonyms is not None:
          self.synonyms = synonyms
        if ontology_name is not None:
          self.ontology_name = ontology_name
        if ontology_prefix is not None:
          self.ontology_prefix = ontology_prefix
        if ontology_iri is not None:
          self.ontology_iri = ontology_iri
        if is_obsolete is not None:
          self.is_obsolete = is_obsolete
        if term_replaced_by is not None:
          self.term_replaced_by = term_replaced_by
        if is_defining_ontology is not None:
          self.is_defining_ontology = is_defining_ontology
        if has_children is not None:
          self.has_children = has_children
        if is_root is not None:
          self.is_root = is_root
        if short_form is not None:
          self.short_form = short_form
        if in_subset is not None:
          self.in_subset = in_subset
        if obo_id is not None:
          self.obo_id = obo_id
        if obo_definition_citation is not None:
          self.obo_definition_citation = obo_definition_citation
        if obo_xref is not None:
          self.obo_xref = obo_xref
        if obo_synonym is not None:
          self.obo_synonym = obo_synonym
        if links is not None:
          self.links = links

    @property
    def iri(self):
        """
        Gets the iri of this Term.

        :return: The iri of this Term.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri):
        """
        Sets the iri of this Term.

        :param iri: The iri of this Term.
        :type: str
        """

        self._iri = iri

    @property
    def label(self):
        """
        Gets the label of this Term.

        :return: The label of this Term.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Term.

        :param label: The label of this Term.
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """
        Gets the description of this Term.

        :return: The description of this Term.
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Term.

        :param description: The description of this Term.
        :type: list[str]
        """

        self._description = description

    @property
    def annotation(self):
        """
        Gets the annotation of this Term.

        :return: The annotation of this Term.
        :rtype: TermAnnotation
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """
        Sets the annotation of this Term.

        :param annotation: The annotation of this Term.
        :type: TermAnnotation
        """

        self._annotation = annotation

    @property
    def synonyms(self):
        """
        Gets the synonyms of this Term.

        :return: The synonyms of this Term.
        :rtype: object
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """
        Sets the synonyms of this Term.

        :param synonyms: The synonyms of this Term.
        :type: object
        """

        self._synonyms = synonyms

    @property
    def ontology_name(self):
        """
        Gets the ontology_name of this Term.

        :return: The ontology_name of this Term.
        :rtype: str
        """
        return self._ontology_name

    @ontology_name.setter
    def ontology_name(self, ontology_name):
        """
        Sets the ontology_name of this Term.

        :param ontology_name: The ontology_name of this Term.
        :type: str
        """

        self._ontology_name = ontology_name

    @property
    def ontology_prefix(self):
        """
        Gets the ontology_prefix of this Term.

        :return: The ontology_prefix of this Term.
        :rtype: str
        """
        return self._ontology_prefix

    @ontology_prefix.setter
    def ontology_prefix(self, ontology_prefix):
        """
        Sets the ontology_prefix of this Term.

        :param ontology_prefix: The ontology_prefix of this Term.
        :type: str
        """

        self._ontology_prefix = ontology_prefix

    @property
    def ontology_iri(self):
        """
        Gets the ontology_iri of this Term.

        :return: The ontology_iri of this Term.
        :rtype: str
        """
        return self._ontology_iri

    @ontology_iri.setter
    def ontology_iri(self, ontology_iri):
        """
        Sets the ontology_iri of this Term.

        :param ontology_iri: The ontology_iri of this Term.
        :type: str
        """

        self._ontology_iri = ontology_iri

    @property
    def is_obsolete(self):
        """
        Gets the is_obsolete of this Term.

        :return: The is_obsolete of this Term.
        :rtype: bool
        """
        return self._is_obsolete

    @is_obsolete.setter
    def is_obsolete(self, is_obsolete):
        """
        Sets the is_obsolete of this Term.

        :param is_obsolete: The is_obsolete of this Term.
        :type: bool
        """

        self._is_obsolete = is_obsolete

    @property
    def term_replaced_by(self):
        """
        Gets the term_replaced_by of this Term.

        :return: The term_replaced_by of this Term.
        :rtype: object
        """
        return self._term_replaced_by

    @term_replaced_by.setter
    def term_replaced_by(self, term_replaced_by):
        """
        Sets the term_replaced_by of this Term.

        :param term_replaced_by: The term_replaced_by of this Term.
        :type: object
        """

        self._term_replaced_by = term_replaced_by

    @property
    def is_defining_ontology(self):
        """
        Gets the is_defining_ontology of this Term.

        :return: The is_defining_ontology of this Term.
        :rtype: bool
        """
        return self._is_defining_ontology

    @is_defining_ontology.setter
    def is_defining_ontology(self, is_defining_ontology):
        """
        Sets the is_defining_ontology of this Term.

        :param is_defining_ontology: The is_defining_ontology of this Term.
        :type: bool
        """

        self._is_defining_ontology = is_defining_ontology

    @property
    def has_children(self):
        """
        Gets the has_children of this Term.

        :return: The has_children of this Term.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """
        Sets the has_children of this Term.

        :param has_children: The has_children of this Term.
        :type: bool
        """

        self._has_children = has_children

    @property
    def is_root(self):
        """
        Gets the is_root of this Term.

        :return: The is_root of this Term.
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """
        Sets the is_root of this Term.

        :param is_root: The is_root of this Term.
        :type: bool
        """

        self._is_root = is_root

    @property
    def short_form(self):
        """
        Gets the short_form of this Term.

        :return: The short_form of this Term.
        :rtype: str
        """
        return self._short_form

    @short_form.setter
    def short_form(self, short_form):
        """
        Sets the short_form of this Term.

        :param short_form: The short_form of this Term.
        :type: str
        """

        self._short_form = short_form

    @property
    def in_subset(self):
        """
        Gets the in_subset of this Term.

        :return: The in_subset of this Term.
        :rtype: list[str]
        """
        return self._in_subset

    @in_subset.setter
    def in_subset(self, in_subset):
        """
        Sets the in_subset of this Term.

        :param in_subset: The in_subset of this Term.
        :type: list[str]
        """

        self._in_subset = in_subset

    @property
    def obo_id(self):
        """
        Gets the obo_id of this Term.

        :return: The obo_id of this Term.
        :rtype: str
        """
        return self._obo_id

    @obo_id.setter
    def obo_id(self, obo_id):
        """
        Sets the obo_id of this Term.

        :param obo_id: The obo_id of this Term.
        :type: str
        """

        self._obo_id = obo_id

    @property
    def obo_definition_citation(self):
        """
        Gets the obo_definition_citation of this Term.

        :return: The obo_definition_citation of this Term.
        :rtype: list[object]
        """
        return self._obo_definition_citation

    @obo_definition_citation.setter
    def obo_definition_citation(self, obo_definition_citation):
        """
        Sets the obo_definition_citation of this Term.

        :param obo_definition_citation: The obo_definition_citation of this Term.
        :type: list[object]
        """

        self._obo_definition_citation = obo_definition_citation

    @property
    def obo_xref(self):
        """
        Gets the obo_xref of this Term.

        :return: The obo_xref of this Term.
        :rtype: list[object]
        """
        return self._obo_xref

    @obo_xref.setter
    def obo_xref(self, obo_xref):
        """
        Sets the obo_xref of this Term.

        :param obo_xref: The obo_xref of this Term.
        :type: list[object]
        """

        self._obo_xref = obo_xref

    @property
    def obo_synonym(self):
        """
        Gets the obo_synonym of this Term.

        :return: The obo_synonym of this Term.
        :rtype: list[object]
        """
        return self._obo_synonym

    @obo_synonym.setter
    def obo_synonym(self, obo_synonym):
        """
        Sets the obo_synonym of this Term.

        :param obo_synonym: The obo_synonym of this Term.
        :type: list[object]
        """

        self._obo_synonym = obo_synonym

    @property
    def links(self):
        """
        Gets the links of this Term.

        :return: The links of this Term.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Term.

        :param links: The links of this Term.
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Term):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
