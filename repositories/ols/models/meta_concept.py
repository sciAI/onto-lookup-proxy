# coding: utf-8

"""
    EBI OLS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetaConcept(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iri': 'str',
        'label': 'str',
        'description': 'str',
        'short': 'str',
        'synonyms': 'str'
    }

    attribute_map = {
        'iri': 'iri',
        'label': 'label',
        'description': 'description',
        'short': 'short',
        'synonyms': 'synonyms'
    }

    def __init__(self, iri='iri', label='label', description='description', short='short_form', synonyms='annotation.alternative_term'):
        """
        MetaConcept - a model defined in Swagger
        """

        self._iri = None
        self._label = None
        self._description = None
        self._short = None
        self._synonyms = None

        if iri is not None:
          self.iri = iri
        if label is not None:
          self.label = label
        if description is not None:
          self.description = description
        if short is not None:
          self.short = short
        if synonyms is not None:
          self.synonyms = synonyms

    @property
    def iri(self):
        """
        Gets the iri of this MetaConcept.

        :return: The iri of this MetaConcept.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri):
        """
        Sets the iri of this MetaConcept.

        :param iri: The iri of this MetaConcept.
        :type: str
        """

        self._iri = iri

    @property
    def label(self):
        """
        Gets the label of this MetaConcept.

        :return: The label of this MetaConcept.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this MetaConcept.

        :param label: The label of this MetaConcept.
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """
        Gets the description of this MetaConcept.

        :return: The description of this MetaConcept.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MetaConcept.

        :param description: The description of this MetaConcept.
        :type: str
        """

        self._description = description

    @property
    def short(self):
        """
        Gets the short of this MetaConcept.

        :return: The short of this MetaConcept.
        :rtype: str
        """
        return self._short

    @short.setter
    def short(self, short):
        """
        Sets the short of this MetaConcept.

        :param short: The short of this MetaConcept.
        :type: str
        """

        self._short = short

    @property
    def synonyms(self):
        """
        Gets the synonyms of this MetaConcept.

        :return: The synonyms of this MetaConcept.
        :rtype: str
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """
        Sets the synonyms of this MetaConcept.

        :param synonyms: The synonyms of this MetaConcept.
        :type: str
        """

        self._synonyms = synonyms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetaConcept):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
