# coding: utf-8

"""
    EBI OLS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SearchApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def search(self, q, **kwargs):
        """
        
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q:  (required)
        :param list[str] ontology: 
        :param str type: 
        :param list[str] field_list: 
        :param list[str] query_fields: 
        :param bool exact: 
        :param bool group_field: 
        :param bool obsoletes: 
        :param bool local: 
        :param int rows: 
        :param int start: 
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_with_http_info(q, **kwargs)
        else:
            (data) = self.search_with_http_info(q, **kwargs)
            return data

    def search_with_http_info(self, q, **kwargs):
        """
        
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_with_http_info(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q:  (required)
        :param list[str] ontology: 
        :param str type: 
        :param list[str] field_list: 
        :param list[str] query_fields: 
        :param bool exact: 
        :param bool group_field: 
        :param bool obsoletes: 
        :param bool local: 
        :param int rows: 
        :param int start: 
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'ontology', 'type', 'field_list', 'query_fields', 'exact', 'group_field', 'obsoletes', 'local', 'rows', 'start']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `search`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'ontology' in params:
            query_params.append(('ontology', params['ontology']))
            collection_formats['ontology'] = 'multi'
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'field_list' in params:
            query_params.append(('fieldList', params['field_list']))
            collection_formats['fieldList'] = 'multi'
        if 'query_fields' in params:
            query_params.append(('queryFields', params['query_fields']))
            collection_formats['queryFields'] = 'multi'
        if 'exact' in params:
            query_params.append(('exact', params['exact']))
        if 'group_field' in params:
            query_params.append(('groupField', params['group_field']))
        if 'obsoletes' in params:
            query_params.append(('obsoletes', params['obsoletes']))
        if 'local' in params:
            query_params.append(('local', params['local']))
        if 'rows' in params:
            query_params.append(('rows', params['rows']))
        if 'start' in params:
            query_params.append(('start', params['start']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Search',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def select(self, q, **kwargs):
        """
        
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q:  (required)
        :param list[str] ontology: 
        :param str type: 
        :param list[str] field_list: 
        :param bool obsoletes: 
        :param bool local: 
        :param int rows: 
        :param int start: 
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.select_with_http_info(q, **kwargs)
        else:
            (data) = self.select_with_http_info(q, **kwargs)
            return data

    def select_with_http_info(self, q, **kwargs):
        """
        
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.select_with_http_info(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q:  (required)
        :param list[str] ontology: 
        :param str type: 
        :param list[str] field_list: 
        :param bool obsoletes: 
        :param bool local: 
        :param int rows: 
        :param int start: 
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'ontology', 'type', 'field_list', 'obsoletes', 'local', 'rows', 'start']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method select" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `select`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'ontology' in params:
            query_params.append(('ontology', params['ontology']))
            collection_formats['ontology'] = 'multi'
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'field_list' in params:
            query_params.append(('fieldList', params['field_list']))
            collection_formats['fieldList'] = 'multi'
        if 'obsoletes' in params:
            query_params.append(('obsoletes', params['obsoletes']))
        if 'local' in params:
            query_params.append(('local', params['local']))
        if 'rows' in params:
            query_params.append(('rows', params['rows']))
        if 'start' in params:
            query_params.append(('start', params['start']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/select', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Search',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suggest(self, q, **kwargs):
        """
        
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suggest(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q:  (required)
        :param list[str] ontology: 
        :param int rows: 
        :param int start: 
        :return: Suggest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suggest_with_http_info(q, **kwargs)
        else:
            (data) = self.suggest_with_http_info(q, **kwargs)
            return data

    def suggest_with_http_info(self, q, **kwargs):
        """
        
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suggest_with_http_info(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q:  (required)
        :param list[str] ontology: 
        :param int rows: 
        :param int start: 
        :return: Suggest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'ontology', 'rows', 'start']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `suggest`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'ontology' in params:
            query_params.append(('ontology', params['ontology']))
            collection_formats['ontology'] = 'multi'
        if 'rows' in params:
            query_params.append(('rows', params['rows']))
        if 'start' in params:
            query_params.append(('start', params['start']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/suggest', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suggest',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
