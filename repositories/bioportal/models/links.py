# coding: utf-8

"""
    NCBO BioPortal API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Links(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'Link',
        'ontology': 'Link',
        'children': 'Link',
        'parents': 'Link',
        'descendants': 'Link',
        'ancestors': 'Link',
        'instances': 'Link',
        'tree': 'Link',
        'notes': 'Link',
        'mappings': 'Link',
        'ui': 'Link',
        'submissions': 'Link',
        'properties': 'Link',
        'classes': 'Link',
        'roots': 'Link',
        'metrics': 'Link',
        'reviews': 'Link',
        'groups': 'Link',
        'categories': 'Link',
        'projects': 'Link',
        'views': 'Link',
        'analytics': 'Link',
        'next_page': 'Link',
        'prev_page': 'Link'
    }

    attribute_map = {
        '_self': 'self',
        'ontology': 'ontology',
        'children': 'children',
        'parents': 'parents',
        'descendants': 'descendants',
        'ancestors': 'ancestors',
        'instances': 'instances',
        'tree': 'tree',
        'notes': 'notes',
        'mappings': 'mappings',
        'ui': 'ui',
        'submissions': 'submissions',
        'properties': 'properties',
        'classes': 'classes',
        'roots': 'roots',
        'metrics': 'metrics',
        'reviews': 'reviews',
        'groups': 'groups',
        'categories': 'categories',
        'projects': 'projects',
        'views': 'views',
        'analytics': 'analytics',
        'next_page': 'nextPage',
        'prev_page': 'prevPage'
    }

    def __init__(self, _self=None, ontology=None, children=None, parents=None, descendants=None, ancestors=None, instances=None, tree=None, notes=None, mappings=None, ui=None, submissions=None, properties=None, classes=None, roots=None, metrics=None, reviews=None, groups=None, categories=None, projects=None, views=None, analytics=None, next_page=None, prev_page=None):
        """
        Links - a model defined in Swagger
        """

        self.__self = None
        self._ontology = None
        self._children = None
        self._parents = None
        self._descendants = None
        self._ancestors = None
        self._instances = None
        self._tree = None
        self._notes = None
        self._mappings = None
        self._ui = None
        self._submissions = None
        self._properties = None
        self._classes = None
        self._roots = None
        self._metrics = None
        self._reviews = None
        self._groups = None
        self._categories = None
        self._projects = None
        self._views = None
        self._analytics = None
        self._next_page = None
        self._prev_page = None

        if _self is not None:
          self._self = _self
        if ontology is not None:
          self.ontology = ontology
        if children is not None:
          self.children = children
        if parents is not None:
          self.parents = parents
        if descendants is not None:
          self.descendants = descendants
        if ancestors is not None:
          self.ancestors = ancestors
        if instances is not None:
          self.instances = instances
        if tree is not None:
          self.tree = tree
        if notes is not None:
          self.notes = notes
        if mappings is not None:
          self.mappings = mappings
        if ui is not None:
          self.ui = ui
        if submissions is not None:
          self.submissions = submissions
        if properties is not None:
          self.properties = properties
        if classes is not None:
          self.classes = classes
        if roots is not None:
          self.roots = roots
        if metrics is not None:
          self.metrics = metrics
        if reviews is not None:
          self.reviews = reviews
        if groups is not None:
          self.groups = groups
        if categories is not None:
          self.categories = categories
        if projects is not None:
          self.projects = projects
        if views is not None:
          self.views = views
        if analytics is not None:
          self.analytics = analytics
        if next_page is not None:
          self.next_page = next_page
        if prev_page is not None:
          self.prev_page = prev_page

    @property
    def _self(self):
        """
        Gets the _self of this Links.

        :return: The _self of this Links.
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """
        Sets the _self of this Links.

        :param _self: The _self of this Links.
        :type: Link
        """

        self.__self = _self

    @property
    def ontology(self):
        """
        Gets the ontology of this Links.

        :return: The ontology of this Links.
        :rtype: Link
        """
        return self._ontology

    @ontology.setter
    def ontology(self, ontology):
        """
        Sets the ontology of this Links.

        :param ontology: The ontology of this Links.
        :type: Link
        """

        self._ontology = ontology

    @property
    def children(self):
        """
        Gets the children of this Links.

        :return: The children of this Links.
        :rtype: Link
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this Links.

        :param children: The children of this Links.
        :type: Link
        """

        self._children = children

    @property
    def parents(self):
        """
        Gets the parents of this Links.

        :return: The parents of this Links.
        :rtype: Link
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """
        Sets the parents of this Links.

        :param parents: The parents of this Links.
        :type: Link
        """

        self._parents = parents

    @property
    def descendants(self):
        """
        Gets the descendants of this Links.

        :return: The descendants of this Links.
        :rtype: Link
        """
        return self._descendants

    @descendants.setter
    def descendants(self, descendants):
        """
        Sets the descendants of this Links.

        :param descendants: The descendants of this Links.
        :type: Link
        """

        self._descendants = descendants

    @property
    def ancestors(self):
        """
        Gets the ancestors of this Links.

        :return: The ancestors of this Links.
        :rtype: Link
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this Links.

        :param ancestors: The ancestors of this Links.
        :type: Link
        """

        self._ancestors = ancestors

    @property
    def instances(self):
        """
        Gets the instances of this Links.

        :return: The instances of this Links.
        :rtype: Link
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this Links.

        :param instances: The instances of this Links.
        :type: Link
        """

        self._instances = instances

    @property
    def tree(self):
        """
        Gets the tree of this Links.

        :return: The tree of this Links.
        :rtype: Link
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """
        Sets the tree of this Links.

        :param tree: The tree of this Links.
        :type: Link
        """

        self._tree = tree

    @property
    def notes(self):
        """
        Gets the notes of this Links.

        :return: The notes of this Links.
        :rtype: Link
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this Links.

        :param notes: The notes of this Links.
        :type: Link
        """

        self._notes = notes

    @property
    def mappings(self):
        """
        Gets the mappings of this Links.

        :return: The mappings of this Links.
        :rtype: Link
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """
        Sets the mappings of this Links.

        :param mappings: The mappings of this Links.
        :type: Link
        """

        self._mappings = mappings

    @property
    def ui(self):
        """
        Gets the ui of this Links.

        :return: The ui of this Links.
        :rtype: Link
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """
        Sets the ui of this Links.

        :param ui: The ui of this Links.
        :type: Link
        """

        self._ui = ui

    @property
    def submissions(self):
        """
        Gets the submissions of this Links.

        :return: The submissions of this Links.
        :rtype: Link
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """
        Sets the submissions of this Links.

        :param submissions: The submissions of this Links.
        :type: Link
        """

        self._submissions = submissions

    @property
    def properties(self):
        """
        Gets the properties of this Links.

        :return: The properties of this Links.
        :rtype: Link
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Links.

        :param properties: The properties of this Links.
        :type: Link
        """

        self._properties = properties

    @property
    def classes(self):
        """
        Gets the classes of this Links.

        :return: The classes of this Links.
        :rtype: Link
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """
        Sets the classes of this Links.

        :param classes: The classes of this Links.
        :type: Link
        """

        self._classes = classes

    @property
    def roots(self):
        """
        Gets the roots of this Links.

        :return: The roots of this Links.
        :rtype: Link
        """
        return self._roots

    @roots.setter
    def roots(self, roots):
        """
        Sets the roots of this Links.

        :param roots: The roots of this Links.
        :type: Link
        """

        self._roots = roots

    @property
    def metrics(self):
        """
        Gets the metrics of this Links.

        :return: The metrics of this Links.
        :rtype: Link
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """
        Sets the metrics of this Links.

        :param metrics: The metrics of this Links.
        :type: Link
        """

        self._metrics = metrics

    @property
    def reviews(self):
        """
        Gets the reviews of this Links.

        :return: The reviews of this Links.
        :rtype: Link
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """
        Sets the reviews of this Links.

        :param reviews: The reviews of this Links.
        :type: Link
        """

        self._reviews = reviews

    @property
    def groups(self):
        """
        Gets the groups of this Links.

        :return: The groups of this Links.
        :rtype: Link
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this Links.

        :param groups: The groups of this Links.
        :type: Link
        """

        self._groups = groups

    @property
    def categories(self):
        """
        Gets the categories of this Links.

        :return: The categories of this Links.
        :rtype: Link
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this Links.

        :param categories: The categories of this Links.
        :type: Link
        """

        self._categories = categories

    @property
    def projects(self):
        """
        Gets the projects of this Links.

        :return: The projects of this Links.
        :rtype: Link
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """
        Sets the projects of this Links.

        :param projects: The projects of this Links.
        :type: Link
        """

        self._projects = projects

    @property
    def views(self):
        """
        Gets the views of this Links.

        :return: The views of this Links.
        :rtype: Link
        """
        return self._views

    @views.setter
    def views(self, views):
        """
        Sets the views of this Links.

        :param views: The views of this Links.
        :type: Link
        """

        self._views = views

    @property
    def analytics(self):
        """
        Gets the analytics of this Links.

        :return: The analytics of this Links.
        :rtype: Link
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """
        Sets the analytics of this Links.

        :param analytics: The analytics of this Links.
        :type: Link
        """

        self._analytics = analytics

    @property
    def next_page(self):
        """
        Gets the next_page of this Links.

        :return: The next_page of this Links.
        :rtype: Link
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """
        Sets the next_page of this Links.

        :param next_page: The next_page of this Links.
        :type: Link
        """

        self._next_page = next_page

    @property
    def prev_page(self):
        """
        Gets the prev_page of this Links.

        :return: The prev_page of this Links.
        :rtype: Link
        """
        return self._prev_page

    @prev_page.setter
    def prev_page(self, prev_page):
        """
        Sets the prev_page of this Links.

        :param prev_page: The prev_page of this Links.
        :type: Link
        """

        self._prev_page = prev_page

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Links):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
